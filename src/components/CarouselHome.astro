---
const CAROUSEL_HERO = [
  {
    title: "EXPERIENCIA",
    description: `Lo más importante al elegir un curso de buceo es la experiencia de los Instructores.<br />Desde 1986, ${new Date().getFullYear() - 1986} años ininterrumpidos dictando cursos de buceo. Más de 6000 alumnos certificados.`,
  },
  {
    title: "DISPONIBILIDAD",
    description:
      "Programá el curso de buceo según tu disponibilidad. Con nosotros podés elegir día, horario y cantidad de clases semanales. Lunes a Sábados.",
  },
  {
    title: "COMODIDAD",
    description:
      "Cursos de buceo totalmente personalizados de 1 a 6 alumnos como máximo. Nuestro objetivo es tu comodidad y que te sientas seguro y sin presiones. Siempre hay un instructor para vos.",
  },
  {
    title: "PROMOCION",
    description: "Inscribite AHORA con un 2x1. Uno paga y dos hacen el curso de buceo Open Water Diver.",
  },
];
---

<div class="carousel__container">
  <ul class="carousel__content">
    {
      CAROUSEL_HERO.map((item, index) => {
        const classItem = index === 0 ? "carousel__item active" : "carousel__item";
        return (
          <li class={classItem}>
            <h2 class="carousel__item--title">{item.title}</h2>
            <p class="carousel__item--description" set:html={item.description} />
          </li>
        );
      })
    }
  </ul>
  <nav class="carousel__pagination">
    {
      CAROUSEL_HERO.map((item, index) => {
        const classButton = index === 0 ? "active" : "";
        return <button class={classButton} />;
      })
    }
  </nav>
  {
    /*
  <div class="carousel__controls">
    <button id="carousel__controls-prev"
      ><svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
        ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M15 6l-6 6l6 6"></path></svg
      ></button
    >
    <button id="carousel__controls-next"
      ><svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
        ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M9 6l6 6l-6 6"></path></svg
      ></button
    >
  </div>
  */
  }
</div>

<style lang="scss">
  @import "../styles/variables";

  .carousel {
    &__container {
      position: relative;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      height: 100%;
    }

    &__content {
      position: relative;
      width: 100%;
      overflow: hidden;

      &::after {
        display: block;
        clear: both;
        content: "";
      }
    }

    &__item {
      position: relative;
      display: none;
      float: left;
      width: 100%;
      margin-right: -100%;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      transition: transform 0.6s ease-in-out;

      &.active,
      &--next,
      &--prev {
        display: block;
      }

      &--title {
        font-size: clamp(30px, 3.5vw, 56px);
        text-align: left;
        margin-bottom: 0;
      }

      &--description {
        padding-right: 16px;
        font-size: clamp(14px, 2.8vw, 28px);
      }
    }

    &__pagination {
      display: flex;
      justify-content: center;
      column-gap: 16px;

      & button {
        border: none;
        background: #bbbbbb;
        cursor: pointer;
        width: 16px;
        height: 16px;
        border-radius: 50%;
      }

      & .active {
        background: #727272;
      }
    }

    &__controls {
      position: absolute;
      top: 80%;
      left: 0;
      width: 100%;
      display: flex;
      justify-content: space-between;

      & button {
        border: none;
        background: rgba(0, 0, 0, 0.5);

        & svg {
          display: block;
          width: 36px;
          height: auto;
          color: $font-color-min;
        }
      }
    }
  }

  .carousel__item--next:not(.carousel__item--start),
  .active.carousel__item--end {
    transform: translateX(100%);
  }

  .carousel__item--prev:not(.carousel__item--end),
  .active.carousel__item--start {
    transform: translateX(-100%);
  }

  @media (width > 768px) {
    .carousel__item--title {
      font-size: clamp(38px, 3vw, 56px);
    }

    .carousel__item--description {
      font-size: clamp(16px, 1.5vw, 28px);
    }
  }
</style>

<script>
  /************/
  /* Constant */
  /************/
  const SELECTOR_ITEM = "carousel__item";
  const SELECTOR_PAGINATION = "carousel__pagination";
  const SELECTOR_BTN_NEXT = "carousel__controls-next";
  const SELECTOR_BTN_PREV = "carousel__controls-prev";
  const CLASS_NAME_ACTIVE = "active";
  const CLASS_NAME_START = "carousel__item--start";
  const CLASS_NAME_END = "carousel__item--end";
  const CLASS_NAME_NEXT = "carousel__item--next";
  const CLASS_NAME_PREV = "carousel__item--prev";
  const INTERVAL = 10000;

  /***************/
  /* HTMLElement */
  /***************/
  const items = document.getElementsByClassName(SELECTOR_ITEM) as HTMLCollectionOf<HTMLElement>;
  const pagination = document.getElementsByClassName(SELECTOR_PAGINATION) as HTMLCollectionOf<HTMLElement>;
  const btnNext = document.getElementById(SELECTOR_BTN_NEXT);
  const btnPrev = document.getElementById(SELECTOR_BTN_PREV);

  /* const x = document.getElementsByClassName("carousel__container") as HTMLCollectionOf<HTMLElement>;
  console.log(x);
  const y = x[0].getElementsByClassName(SELECTOR_ITEM) as HTMLCollectionOf<HTMLElement>;
  console.log(y); */

  // Evaluar si la longitud es 1 o mayor
  //console.log(x[0].children[0]);

  /*************/
  /* Variables */
  /*************/
  let intervalId: number;
  let orderIndex = -1;
  let isMoving = false;
  const numberOfItems = items.length;
  const withPagination = pagination.length > 0 && pagination[0].children.length > 0;

  /**********/
  /* Events */
  /**********/

  // Pagination

  if (withPagination) {
    for (let i = 0; i < pagination[0].children.length; i++) {
      pagination[0].children[i].addEventListener("click", (event) => {
        event.preventDefault();
        if (!isMoving) {
          clearInterval(intervalId);
          move(i);
          intervalId = setInterval(loop, INTERVAL);
        }
      });
    }
  }

  // Control Next

  btnNext?.addEventListener("click", (event) => {
    event.preventDefault();
    if (!isMoving) {
      clearInterval(intervalId);
      move((orderIndex += 1));
      intervalId = setInterval(loop, INTERVAL);
    }
  });

  // Control Prev

  btnPrev?.addEventListener("click", (event) => {
    event.preventDefault();
    if (!isMoving) {
      clearInterval(intervalId);
      move((orderIndex -= 1));
      intervalId = setInterval(loop, INTERVAL);
    }
  });

  /*************/
  /* Functions */
  /*************/
  const getActive = () => {
    for (let i = 0; i < numberOfItems; i++) {
      if (items[i].classList.contains(CLASS_NAME_ACTIVE)) return i;
    }
    return -1;
  };

  const reflow = (element: HTMLElement) => {
    element.offsetHeight;
  };

  const setActivePagination = (n: number) => {
    for (let i = 0; i < pagination[0].children.length; i++) {
      if (n === i) {
        pagination[0].children[i].classList.add(CLASS_NAME_ACTIVE);
      } else {
        pagination[0].children[i].classList.remove(CLASS_NAME_ACTIVE);
      }
    }
  };

  const move = (index: number) => {
    const activeItemIndex = getActive();

    if (activeItemIndex === -1 || activeItemIndex === index) return;

    isMoving = true; // Block buttons

    const isNext = index > activeItemIndex;

    orderIndex = isNext ? (index >= numberOfItems ? 0 : index) : index < 0 ? numberOfItems - 1 : index;

    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;

    items[orderIndex].classList.add(orderClassName);
    reflow(items[orderIndex]);
    items[activeItemIndex].classList.add(directionalClassName);
    items[orderIndex].classList.add(directionalClassName);

    setTimeout(() => {
      items[activeItemIndex].classList.remove(CLASS_NAME_ACTIVE, directionalClassName);
      items[orderIndex].classList.remove(orderClassName, directionalClassName);
      items[orderIndex].classList.add(CLASS_NAME_ACTIVE);
      if (withPagination) {
        setActivePagination(orderIndex);
      }
      isMoving = false; // Unblock buttons
    }, 600);
  };

  const loop = () => {
    clearInterval(intervalId);
    move((orderIndex += 1));
    intervalId = setInterval(loop, INTERVAL);
  };

  loop();

  /* class Carousel {
    id = "";
    intervalId = 0;
    orderIndex = -1;
    isMoving = false;
    numberOfItems = 0; //items.length;
    withPagination = false; //pagination.length > 0 && pagination[0].children.length > 0;

    constructor(
      id: string,
      intervalId: number,
      orderIndex: number,
      isMoving: boolean,
      numberOfItems: number,
      withPagination: boolean
    ) {
      this.id = id;
      this.intervalId = intervalId;
      this.orderIndex = orderIndex;
      this.isMoving = isMoving;
      this.numberOfItems = numberOfItems;
      this.withPagination = withPagination;

      //this.loop();
    }

    loop = () => {
      clearInterval(this.intervalId);
      console.log(this.id + "-" + (this.orderIndex += 1));
      this.intervalId = setInterval(this.loop, 1000);
    };
  }

  const carousel1 = new Carousel(x[0].id, 0, -1, false, 0, false);
  const carousel2 = new Carousel(x[1].id, 0, -1, false, 0, false); */
</script>
